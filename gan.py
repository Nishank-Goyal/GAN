# -*- coding: utf-8 -*-
"""GAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iNykUyuI9aFjMsLHQJThkMukmqD-Y3Bv

INSTALL DEPENDENCIES AND SETUP
"""

!pip install tensorflow matplotlib tensorflow-datasets ipywidgets

#Bringing in tensorflow
import tensorflow as tf
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
  tf.config.experimental.set_memory_growth(gpu, True)

#Bringing in tensorflow datasets for eurosat
import tensorflow_datasets as tfds
#Bringing in matplotlib for viz stuff
from matplotlib import pyplot as plt

#Use tensorflow dataset api to bring in the data source
ds = tfds.load('fashion_mnist',split='train')

ds.as_numpy_iterator().next()['label']

"""DATA VIZ AND DATASET"""

#do some data transformation
import numpy as np

#setup connection aka iterator
dataiterator = ds.as_numpy_iterator()

#Getting data out of the pipeline
dataiterator.next()

#setup the subplot formatting
fig, ax = plt.subplots(ncols=4,figsize=(20,20))
#loop four times and get images
for idx in range(4):
  #grab an image and label
  sample = dataiterator.next()
  #plot the image using a specific subplot
  ax[idx].imshow(np.squeeze(sample['image']))
  #appending the image label as plot title
  ax[idx].title.set_text(sample['label'])

#scale and return images only
def scale_images(data):
  image = data['image']
  return image/255

#reload the dataset
ds = tfds.load('fashion_mnist',split='train')
#running the dataset through preprocessing steps
ds = ds.map(scale_images)
ds = ds.cache()
ds = ds.shuffle(60000)
ds = ds.batch(128)
ds = ds.prefetch(64)

ds.as_numpy_iterator().next().shape

"""BUILDING THE NEURAL NETWORK

Importing the modelling components
"""

#Bringing in the sequential api for smooth flow
from tensorflow.keras.models import Sequential
#Bringing the layers for the neural network
from tensorflow.keras.layers import Conv2D, Dense, Flatten, Reshape, LeakyReLU, Dropout, UpSampling2D

"""Building the Generator"""

def build_generator():
  model = Sequential()

  #takes in random values and reshapes it to 8x8x256
  model.add(Dense(7*7*128, input_dim=128))
  model.add(LeakyReLU(0.2))
  model.add(Reshape((7,7,128)))

  #upsampling block 1
  model.add(UpSampling2D())
  model.add(Conv2D(128,5,padding="same"))
  model.add(LeakyReLU(0.2))

  #upsampling block 3
  model.add(UpSampling2D())
  model.add(Conv2D(128,5,padding="same"))
  model.add(LeakyReLU(0.2))

  #Convoltuional block 1
  model.add(Conv2D(128,4,padding="same"))
  model.add(LeakyReLU(0.2))

  #Convoltuional block 2
  model.add(Conv2D(128,4,padding="same"))
  model.add(LeakyReLU(0.2))

  #Convolutional Layer to get one channel
  model.add(Conv2D(1,4,padding="same",activation='sigmoid'))

  return model

generator = build_generator()

generator.summary()

img = generator.predict(np.random.randn(4,128,1))

img.shape

#Test the generator
img = generator.predict(np.random.randn(4,128,1))
# Setup the subplot formatting
fig, ax = plt.subplots(ncols=4, figsize=(20,20))
# Loop four times and get images
for idx, img in enumerate(img):
    # Plot the image using a specific subplot
    ax[idx].imshow(np.squeeze(img))
    # Appending the image label as the plot title
    ax[idx].title.set_text(idx)

"""Building the Discriminator"""

def build_discriminator():
  model = Sequential()

  #first conv block
  model.add(Conv2D(32,5,input_shape=(28,28,1)))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  #second conv block
  model.add(Conv2D(64,5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  #third conv block
  model.add(Conv2D(128,5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  #fourth conv block
  model.add(Conv2D(256,5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  #Flatten then pass these to dense layers
  model.add(Flatten())
  model.add(Dropout(0.4))
  model.add(Dense(1,activation="sigmoid"))

  return model

discriminator = build_discriminator()

discriminator.summary()

img.shape

discriminator.predict(img)

"""CUSTOM TRAINING LOOP

Setup Losses and Optimises
"""

#Adam is going to be out optimizer for both
from tensorflow.keras.optimizers import Adam
#Binary Cross Entropy is going to be the loss for both
from tensorflow.keras.losses import BinaryCrossentropy

#creating instances
g_opt = Adam(learning_rate=0.0001)
d_opt = Adam(learning_rate=0.00001)
g_loss = BinaryCrossentropy()
d_loss = BinaryCrossentropy()

"""Build Subclassed Models"""

#importing the base model class to subclass- our training step
from tensorflow.keras.models import Model

class FashionGAN(Model):
    def __init__(self, generator, discriminator, *args, **kwargs):
        # Pass through args and kwargs to base class
        super().__init__(*args, **kwargs)

        # Create attributes for gen and disc
        self.generator = generator
        self.discriminator = discriminator

    def compile(self, g_opt, d_opt, g_loss, d_loss, *args, **kwargs):
        # Compile with base class
        super().compile(*args, **kwargs)

        # Create attributes for losses and optimizers
        self.g_opt = g_opt
        self.d_opt = d_opt
        self.g_loss = g_loss
        self.d_loss = d_loss

    def train_step(self, batch):
        # Get the data
        real_images = batch
        fake_images = self.generator(tf.random.normal((128, 128, 1)), training=False)

        # Train the discriminator
        with tf.GradientTape() as d_tape:
            # Pass the real and fake images to the discriminator model
            yhat_real = self.discriminator(real_images, training=True)
            yhat_fake = self.discriminator(fake_images, training=True)
            yhat_realfake = tf.concat([yhat_real, yhat_fake], axis=0)

            # Create labels for real and fakes images
            y_realfake = tf.concat([tf.zeros_like(yhat_real), tf.ones_like(yhat_fake)], axis=0)

            # Add some noise to the TRUE outputs
            noise_real = 0.15*tf.random.uniform(tf.shape(yhat_real))
            noise_fake = -0.15*tf.random.uniform(tf.shape(yhat_fake))
            y_realfake += tf.concat([noise_real, noise_fake], axis=0)

            # Calculate loss - BINARYCROSS
            total_d_loss = self.d_loss(y_realfake, yhat_realfake)

        # Apply backpropagation - nn learn
        dgrad = d_tape.gradient(total_d_loss, self.discriminator.trainable_variables)
        self.d_opt.apply_gradients(zip(dgrad, self.discriminator.trainable_variables))

        # Train the generator
        with tf.GradientTape() as g_tape:
            # Generate some new images
            gen_images = self.generator(tf.random.normal((128,128,1)), training=True)

            # Create the predicted labels
            predicted_labels = self.discriminator(gen_images, training=False)

            # Calculate loss - trick to training to fake out the discriminator
            total_g_loss = self.g_loss(tf.zeros_like(predicted_labels), predicted_labels)

        # Apply backprop
        ggrad = g_tape.gradient(total_g_loss, self.generator.trainable_variables)
        self.g_opt.apply_gradients(zip(ggrad, self.generator.trainable_variables))

        return {"d_loss":total_d_loss, "g_loss":total_g_loss}

# Create instance of subclassed model
fashgan = FashionGAN(generator, discriminator)

# Compile the model
fashgan.compile(g_opt, d_opt, g_loss, d_loss)

"""BUILD CALLBACK"""

import os
from tensorflow.keras.preprocessing.image import array_to_img
from tensorflow.keras.callbacks import Callback

class ModelMonitor(Callback):
    def __init__(self, num_img=3, latent_dim=128):
        self.num_img = num_img
        self.latent_dim = latent_dim

    def on_epoch_end(self, epoch, logs=None):
        random_latent_vectors = tf.random.uniform((self.num_img, self.latent_dim,1))
        generated_images = self.model.generator(random_latent_vectors)
        generated_images *= 255
        generated_images.numpy()
        for i in range(self.num_img):
            img = array_to_img(generated_images[i])
            img.save(os.path.join('images', f'generated_img_{epoch}_{i}.png'))

"""TRAIN"""

import os
# Create the 'images' directory if it doesn't exist
os.makedirs('images', exist_ok=True)

# Recommend 2000 epochs
hist = fashgan.fit(ds, epochs=20, callbacks=[ModelMonitor()])

"""4.4 Review Performance"""

plt.suptitle("Loss")
plt.plot(hist.history['d_loss'],label='d_loss')
plt.plot(hist.history['g_loss'],label='g_loss')
plt.legend()
plt.show()

"""Testing Out the Generator"""

import os
# Create the 'archive' directory if it doesn't exist
os.makedirs('archive', exist_ok=True)
generator.save(os.path.join('archive','generator.h5'))
discriminator.save(os.path.join('archive','discriminator.h5'))

#generating images
generator.load_weights(os.path.join('archive','generator.h5'))

imgs = generator.predict(tf.random.normal((16,128,1)))

fig, ax = plt.subplots(ncols=4,nrows=4,figsize=(10,10))
for r in range(4):
  for c in range(4):
    ax[r][c].imshow(imgs[(r+1)*(c+1)-1])